# Build flant/addon-operator-dev images and push
# to hub.docker.com when PR is labeled
# with label ":robot: build dev images" (id=1860106347)
name: Publish dev images
on:
  pull_request:
    types: [labeled]
env:
  GO111MODULE: on

jobs:
  stub:
    name: Empty job to prevent workflow fail
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id != 1860106347 # not ':robot: build dev images' label
    steps:
      - name: stub action
        run: ": This job is used to prevent the workflow to fail when all other jobs are skipped."
#      - name: dump label event
#        run: cat $GITHUB_EVENT_PATH
#      - name: dump envs
#        run: export

  unlabel:
    name: Unlabel
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1860106347 # ':robot: build dev images' label
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const eventLabelName = '${{github.event.label.name}}'
            const response = await github.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            for (const label of response.data) {
              if (label.name === eventLabelName) {
                github.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: eventLabelName
                })
                break
              }
            }

  build_dev_image:
    name: Dev image
    strategy:
      fail-fast: false
      matrix:
        flavour:
          - ubuntu
          - alpine
        ref:
          - "refs/heads/master"
          - "refs/tags/v0.0.0"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1860106347 # ':robot: build dev images' label
    steps:
      - uses: actions/checkout@v2

      - name: Prepare appVersion
        run: |
          # master-371e2d3b9467fb9b72b515fb5e30d39964519601-2020.02.06_18:37:42
          appVersion=dev-$GITHUB_HEAD_REF-${HEAD_SHA::8}-$(date +'%Y.%m.%d_%H:%M:%S')
          echo "APP_VERSION=${appVersion}" >> $GITHUB_ENV
          echo "AppVersion is '${appVersion}'"

      - name: Build '${{ matrix.flavour }}' image
        env:
          FLAVOUR: ${{ matrix.flavour }}
          IMAGE_NAME: flant/addon-operator-dev
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          EMULATE_GITHUB_REF: ${{matrix.ref}}
        run: |
          # This step is close to release-build.yaml to emulate all possible release builds.
          : Setup imageTag, appVersion and dockerFile envs and build image
          imageTag=
          appVersion=
          dockerFile=

          if [[ ${EMULATE_GITHUB_REF} == "refs/heads/master" ]] ; then
            # emulate master branch
            imageTag=latest
            appVersion=$APP_VERSION
          else
            # emulate release
            gitTag=${EMULATE_GITHUB_REF#refs/tags/}
            imageTag=${gitTag}
            appVersion=$APP_VERSION
          fi

          imageTags=
          case $FLAVOUR in
            alpine)
              dockerFile="Dockerfile"
              # alpine is a default image
              if [[ ${imageTag} == "latest" ]] ; then
                imageTags="-t ${IMAGE_NAME}:${imageTag} -t ${IMAGE_NAME}:${FLAVOUR} -t ${IMAGE_NAME}:${FLAVOUR}3.12"
              else
                imageTags="-t ${IMAGE_NAME}:${imageTag} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR}3.12"
              fi
              ;;
            ubuntu)
              dockerFile="Dockerfile-ubuntu"
              if [[ ${imageTag} == "latest" ]] ; then
                imageTags="-t ${IMAGE_NAME}:${FLAVOUR} -t ${IMAGE_NAME}:${FLAVOUR}20.04"
              else
                imageTags="-t ${IMAGE_NAME}:${imageTag}-${FLAVOUR} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR}20.04"
              fi
              ;;
          esac

          echo Build $imageTags with version $appVersion using ./$dockerFile
          docker build --build-arg appVersion=$appVersion $(echo ${imageTags}) -f $dockerFile .

          # save imageTags env for docker push
          echo "IMAGE_TAGS=${imageTags}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Push '${{ matrix.flavour }}' image
        run: |
          echo Push "'$IMAGE_TAGS'"
          for imageTag in $(echo $IMAGE_TAGS | sed s/-t//g ) ; do
            docker push $imageTag
          done
