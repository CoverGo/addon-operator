# Build flant/addon-operator images
# and push to hub.docker.com
# when master branch got new commits
# or new tag is created.
name: Publish release images
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
      - 'dev*'
env:
  GO111MODULE: on

jobs:
  publish_release_images:
    name: Release
    strategy:
      fail-fast: false
      matrix:
        flavour:
          - ubuntu
          - alpine
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v1

      - name: Build '${{ matrix.flavour }}' image
        env:
          FLAVOUR: ${{ matrix.flavour }}
          IMAGE_NAME: flant/addon-operator
        run: |
          : Setup imageTag, appVersion and dockerFile envs and build image
          imageTag=
          appVersion=
          dockerFile=

          if [[ ${GITHUB_REF} == "refs/heads/master" ]] ; then
            # master branch
            imageTag=latest
            appVersion=master-${GITHUB_SHA::8}-$FLAVOUR-$(date +'%Y.%m.%d_%H:%M:%S')
          else
            gitTag=${GITHUB_REF#refs/tags/}
            imageTag=${gitTag}
            appVersion=${gitTag}
          fi

          imageTags=
          case $FLAVOUR in
            alpine)
              dockerFile="Dockerfile"
              # alpine is a default image
              if [[ ${imageTag} == "latest" ]] ; then
                imageTags="-t ${IMAGE_NAME}:${imageTag} -t ${IMAGE_NAME}:${FLAVOUR} -t ${IMAGE_NAME}:${FLAVOUR}3.12"
              else
                imageTags="-t ${IMAGE_NAME}:${imageTag} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR}3.12"
              fi
              ;;
            ubuntu)
              dockerFile="Dockerfile-ubuntu"
              if [[ ${imageTag} == "latest" ]] ; then
                imageTags="-t ${IMAGE_NAME}:${FLAVOUR} -t ${IMAGE_NAME}:${FLAVOUR}20.04"
              else
                imageTags="-t ${IMAGE_NAME}:${imageTag}-${FLAVOUR} -t ${IMAGE_NAME}:${imageTag}-${FLAVOUR}20.04"
              fi
              ;;
          esac

          echo Build $imageTags with version $appVersion using ./$dockerFile
          docker build --build-arg appVersion=$appVersion $(echo $imageTags) -f $dockerFile .

          # save imageTags env for docker push
          echo "IMAGE_TAGS=${imageTags}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Push '${{ matrix.flavour }}' image
        run: |
          echo Push "'$IMAGE_TAGS'"
          for tag in $(echo $IMAGE_TAGS | sed s/-t//g ) ; do
            docker push $tag
          done
